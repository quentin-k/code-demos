     1                                  ; icalc.nasm
     2                                  extern printf
     3                                  section .data
     4 00000000 8000000000000000        	   number1	dq	128	; the numbers to be used to
     5 00000008 1300000000000000        	   number2	dq	19	; show the arithmetic
     6 00000010 F4FFFFFFFFFFFFFF        	   neg_num	dq	-12	; to show the sign extenstion
     7 00000018 546865206E756D6265-     	   fmt		db	"The numbers are %ld and %ld",10,0
     7 00000021 72732061726520256C-
     7 0000002A 6420616E6420256C64-
     7 00000033 0A00               
     8 00000035 257320256C640A00        	   fmtint		db	"%s %ld",10,0
     9 0000003D 7468652073756D2069-     	   sumi		db	"the sum is:",0
     9 00000046 733A00             
    10 00000049 546865206469666665-     	   difi		db	"The difference is",0
    10 00000052 72656E636520697300 
    11 0000005B 4E756D626572203120-     	   inci		db	"Number 1 Incremented:",0
    11 00000064 496E6372656D656E74-
    11 0000006D 65643A00           
    12 00000071 4E756D626572203120-     	   deci		db	"Number 1 Decremented:",0
    12 0000007A 44656372656D656E74-
    12 00000083 65643A00           
    13 00000087 4E756D626572203120-     	   sali		db	"Number 1 Shift left 2 (x4): ",0
    13 00000090 5368696674206C6566-
    13 00000099 74203220287834293A-
    13 000000A2 2000               
    14 000000A4 4E756D626572203120-     	   sari		db	"Number 1 Shift right 2 (/4): ",0
    14 000000AD 536869667420726967-
    14 000000B6 6874203220282F3429-
    14 000000BF 3A2000             
    15 000000C2 4E756D626572203120-     	   sariex		db	"Number 1 Shift right 2 (/4) with "
    15 000000CB 536869667420726967-
    15 000000D4 6874203220282F3429-
    15 000000DD 207769746820       
    16 000000E3 7369676E2065787465-     	   			db	"sign extension:",0
    16 000000EC 6E73696F6E3A00     
    17 000000F3 5468652070726F6475-     	   multi		db	"The product is",0
    17 000000FC 637420697300       
    18 00000102 54686520696E746567-     	   divi		db	"The integer quotient is",0
    18 0000010B 65722071756F746965-
    18 00000114 6E7420697300       
    19 0000011A 546865206D6F64756C-     	   remi		db	"The modulo is",0
    19 00000123 6F20697300         
    20                                  section .bss
    21 00000000 <res 00000008>          	   resulti	resq	1
    22 00000008 <res 00000008>          	   modulo		resq	1
    23                                  section .text
    24                                  	   global main
    25                                  main:
    26 00000000 55                      	   push	rbp
    27 00000001 4889E5                  	   mov	rbp, rsp
    28                                  	   
    29                                  	   ; displaying the numbers
    30 00000004 48BF-                   	   mov	rdi, fmt
    30 00000006 [1800000000000000] 
    31 0000000E 488B3425[00000000]      	   mov	rsi, [number1]
    32 00000016 488B1425[08000000]      	   mov	rdx, [number2]
    33 0000001E B800000000              	   mov	rax, 0
    34 00000023 E8(00000000)            	   call	printf
    35                                  	   
    36                                  	   ; ADDing
    37 00000028 488B0425[00000000]      	   mov	rax, [number1]
    38 00000030 48030425[08000000]      	   add	rax, [number2]		; add number2 to rax
    39 00000038 48890425[00000000]      	   mov	[resulti], rax		; move sum to result
    40                                  	   ; displaying the result
    41 00000040 48BF-                   	   mov	rdi, fmtint
    41 00000042 [3500000000000000] 
    42 0000004A 48BE-                   	   mov	rsi, sumi
    42 0000004C [3D00000000000000] 
    43 00000054 488B1425[00000000]      	   mov	rdx, [resulti]
    44 0000005C B800000000              	   mov	rax, 0
    45 00000061 E8(00000000)            	   call	printf
    46                                  
    47                                  	   ; SUBtracting
    48 00000066 488B0425[00000000]      	   mov	rax,	[number1]
    49 0000006E 482B0425[08000000]      	   sub	rax,	[number2]		; subtract number2 from rax
    50 00000076 48890425[00000000]      	   mov	[resulti], rax
    51                                  	   ; displaying the result
    52 0000007E 48BF-                   	   mov	rdi, fmtint
    52 00000080 [3500000000000000] 
    53 00000088 48BE-                   	   mov	rsi, difi
    53 0000008A [4900000000000000] 
    54 00000092 488B1425[00000000]      	   mov	rdx, [resulti]
    55 0000009A B800000000              	   mov	rax, 0
    56 0000009F E8(00000000)            	   call	printf
    57                                  
    58                                  	   ; INCrementing
    59 000000A4 488B0425[00000000]      	   mov	rax, [number1]
    60 000000AC 48FFC0                  	   inc	rax				; increment rax with 1
    61 000000AF 48890425[00000000]      	   mov	[resulti], rax
    62                                  	   ; displaying the result
    63 000000B7 48BF-                   	   mov	rdi, fmtint
    63 000000B9 [3500000000000000] 
    64 000000C1 48BE-                   	   mov	rsi, inci
    64 000000C3 [5B00000000000000] 
    65 000000CB 488B1425[00000000]      	   mov	rdx, [resulti]
    66 000000D3 B800000000              	   mov	rax, 0
    67 000000D8 E8(00000000)            	   call	printf
    68                                  
    69                                  	   ; DECrementing
    70 000000DD 488B0425[00000000]      	   mov	rax, [number1]
    71 000000E5 48FFC8                  	   dec	rax				; decrement rax with 1
    72 000000E8 48890425[00000000]      	   mov	[resulti], rax
    73                                  	   ; displaying the result
    74 000000F0 48BF-                   	   mov	rdi, fmtint
    74 000000F2 [3500000000000000] 
    75 000000FA 48BE-                   	   mov	rsi, deci
    75 000000FC [7100000000000000] 
    76 00000104 488B1425[00000000]      	   mov	rdx, [resulti]
    77 0000010C B800000000              	   mov	rax, 0
    78 00000111 E8(00000000)            	   call	printf
    79                                  
    80                                  	   ; Shift Arithmetic Left
    81 00000116 488B0425[00000000]      	   mov	rax, [number1]
    82 0000011E 48C1E002                	   sal	rax, 2			; multiply rax by 4
    83 00000122 48890425[00000000]      	   mov	[resulti], rax
    84                                  	   ; displaying the result
    85 0000012A 48BF-                   	   mov	rdi, fmtint
    85 0000012C [3500000000000000] 
    86 00000134 48BE-                   	   mov	rsi, sali
    86 00000136 [8700000000000000] 
    87 0000013E 488B1425[00000000]      	   mov	rdx, [resulti]
    88 00000146 B800000000              	   mov	rax, 0
    89 0000014B E8(00000000)            	   call	printf
    90                                  
    91                                  	   ; Shift Arithmetic Right
    92 00000150 488B0425[00000000]      	   mov	rax, [number1]
    93 00000158 48C1F802                	   sar	rax, 2			; divide rax by 4
    94 0000015C 48890425[00000000]      	   mov	[resulti], rax
    95                                  	   ; displaying the result
    96 00000164 48BF-                   	   mov	rdi, fmtint
    96 00000166 [3500000000000000] 
    97 0000016E 48BE-                   	   mov	rsi, sari
    97 00000170 [A400000000000000] 
    98 00000178 488B1425[00000000]      	   mov	rdx, [resulti]
    99 00000180 B800000000              	   mov	rax, 0
   100 00000185 E8(00000000)            	   call	printf
   101                                  
   102                                  	   ; Shift Arithmetic Right with sign extension
   103 0000018A 488B0425[10000000]      	   mov	rax, [neg_num]
   104 00000192 48C1F802                	   sar	rax, 2			; divide rax by 4
   105 00000196 48890425[00000000]      	   mov	[resulti], rax
   106                                  	   ; displaying the result
   107 0000019E 48BF-                   	   mov	rdi, fmtint
   107 000001A0 [3500000000000000] 
   108 000001A8 48BE-                   	   mov	rsi, sariex
   108 000001AA [C200000000000000] 
   109 000001B2 488B1425[00000000]      	   mov	rdx, [resulti]
   110 000001BA B800000000              	   mov	rax, 0
   111 000001BF E8(00000000)            	   call	printf
   112                                  
   113                                  	   ; MULtiply, why "i" infront of mul though?
   114 000001C4 488B0425[00000000]      	   mov	rax, [number1]
   115 000001CC 48F72C25[08000000]      	   imul	qword [number2]	; multiply rax with number2
   116 000001D4 48890425[00000000]      	   mov	[resulti], rax
   117                                  	   ; displaying the result
   118 000001DC 48BF-                   	   mov	rdi, fmtint
   118 000001DE [3500000000000000] 
   119 000001E6 48BE-                   	   mov	rsi, multi
   119 000001E8 [F300000000000000] 
   120 000001F0 488B1425[00000000]      	   mov	rdx, [resulti]
   121 000001F8 B800000000              	   mov	rax, 0
   122 000001FD E8(00000000)            	   call	printf
   123                                  
   124                                  	   ; DIVide, again, what's with the "i"?
   125 00000202 488B0425[00000000]      	   mov	rax, [number1]
   126 0000020A BA00000000              	   mov	rdx, 0			; rdx needs to be 0 before idiv
   127 0000020F 48F73C25[08000000]      	   idiv	qword [number2]	; divide rax by number, modulo in rdx
   128 00000217 48890425[00000000]      	   mov	[resulti], rax
   129 0000021F 48891425[08000000]      	   mov	[modulo],	rdx		; rdx to modulo
   130                                  	   ; displaying the result
   131 00000227 48BF-                   	   mov	rdi, fmtint
   131 00000229 [3500000000000000] 
   132 00000231 48BE-                   	   mov	rsi, divi
   132 00000233 [0201000000000000] 
   133 0000023B 488B1425[00000000]      	   mov	rdx, [resulti]
   134 00000243 B800000000              	   mov	rax, 0
   135 00000248 E8(00000000)            	   call	printf
   136 0000024D 48BF-                   	   mov	rdi, fmtint
   136 0000024F [3500000000000000] 
   137 00000257 48BE-                   	   mov	rsi, remi
   137 00000259 [1A01000000000000] 
   138 00000261 488B1425[08000000]      	   mov	rdx, [modulo]
   139 00000269 B800000000              	   mov	rax, 0
   140 0000026E E8(00000000)            	   call	printf
   141                                  
   142 00000273 4889EC                  	   mov	rsp, rbp
   143 00000276 5D                      	   pop	rbp
   144 00000277 C3                      	   ret
